    *Terraform Cloud Project*
 Automating Terraform Cloud Infrastructure with Terraform and Build a CI/CD pipeline with Github action workflows for deployment.

Note: This will be a "null_resource" on this project, which doesnt create real infrastructure.

Prerequisites
GitHub Account: To store your code repository.
Terraform Cloud Account: For remote state management and collaboration.
Terraform CLI: Installed on your local machine.
Basic knowledge of Terraform and GitHub Actions.


**Step 1:** 
Create file and setup github repository
1. Create a new repository on GitHub for your Terraform code.
2. Initialize a Terraform configuration. On your local machine, create a directory for your project and add a main.tf file with a null_resource:
3. Also add variables.tf, providers.tf, output.tf , .gitignore, README.md files with following content.

**Step 2:**
1. Create a new workspace in Terraform Cloud:
1a. Navigate to your Terraform Cloud dashboard.
1b. Create a new workspace and connect it to your GitHub repository.
1c. ***goto Terminal**
$ terraform login
$ Enter a value: yes
**Note:** A popup windows to create a Token. Create a Token copy & paste to command line. Look for a "Welcome to HCP Terraform!"

2. "Optional" Set up environment variables in Terraform Cloud if needed. For this example, no specific environment variables are required.
3. adding TF_API_TOKEN token to GitHub repository.

**Step 3:**
Write Github Actions workflows


***Step 4:**
Store Secrets in GitHub
1. Store the Terraform Cloud API token in GitHub Secrets:
github repo --> Security--> Secrets and variables --> Actions--> New Repository Secrets.
Name: TF_API_TOKEN
Token: "Add Secrets"

***Step 5****
Initialize the Git repository and push your Terraform code to GitHub

***Step 6:***
Now witness CI/CD with Github action + Terraform cloud + Git when we we push our code to the main branch in your repository.


***Step 7*** Optional
Set Up Environment Protection Rules

Navigate to Your Repository Settings:
Go to your GitHub repository.
Click on Settings.
Create a New Environment:
In the left sidebar, click on Environments.
Click the New environment button.
Name your environment (e.g., development) and click Configure environment.
Set Protection Rules:
Required reviewers: Specify who can approve deployments to this environment. Eg Add your self as reviewer
Wait timer: Add a wait timer if you want to delay the deployment.
Required status checks: Ensure specific checks pass before deploying.


Resource: 
https://medium.com/@charandasar/automating-infrastructure-deployment-ci-cd-with-github-actions-terraform-cloud-and-terraform-3097ab76ac87

https://www.youtube.com/watch?v=wGthv5gkuXk&t=152s

